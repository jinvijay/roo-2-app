// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jin.roo2.service.impl;

import com.jin.roo2.domain.Food;
import com.jin.roo2.domain.MenuSectionFood;
import com.jin.roo2.repository.FoodRepository;
import com.jin.roo2.service.api.MenuSectionFoodService;
import com.jin.roo2.service.impl.FoodServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect FoodServiceImpl_Roo_Service_Impl {
    
    declare @type: FoodServiceImpl: @Service;
    
    declare @type: FoodServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private FoodRepository FoodServiceImpl.foodRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MenuSectionFoodService FoodServiceImpl.menuSectionFoodService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param foodRepository
     * @param menuSectionFoodService
     */
    @Autowired
    public FoodServiceImpl.new(FoodRepository foodRepository, @Lazy MenuSectionFoodService menuSectionFoodService) {
        setFoodRepository(foodRepository);
        setMenuSectionFoodService(menuSectionFoodService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return FoodRepository
     */
    public FoodRepository FoodServiceImpl.getFoodRepository() {
        return foodRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param foodRepository
     */
    public void FoodServiceImpl.setFoodRepository(FoodRepository foodRepository) {
        this.foodRepository = foodRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MenuSectionFoodService
     */
    public MenuSectionFoodService FoodServiceImpl.getMenuSectionFoodService() {
        return menuSectionFoodService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param menuSectionFoodService
     */
    public void FoodServiceImpl.setMenuSectionFoodService(MenuSectionFoodService menuSectionFoodService) {
        this.menuSectionFoodService = menuSectionFoodService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param food
     * @return Map
     */
    public Map<String, List<MessageI18n>> FoodServiceImpl.validate(Food food) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param food
     * @param menuSectionsToAdd
     * @return Food
     */
    @Transactional
    public Food FoodServiceImpl.addToMenuSections(Food food, Iterable<Long> menuSectionsToAdd) {
        List<MenuSectionFood> menuSections = getMenuSectionFoodService().findAll(menuSectionsToAdd);
        food.addToMenuSections(menuSections);
        return getFoodRepository().save(food);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param food
     * @param menuSectionsToRemove
     * @return Food
     */
    @Transactional
    public Food FoodServiceImpl.removeFromMenuSections(Food food, Iterable<Long> menuSectionsToRemove) {
        List<MenuSectionFood> menuSections = getMenuSectionFoodService().findAll(menuSectionsToRemove);
        food.removeFromMenuSections(menuSections);
        return getFoodRepository().save(food);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param food
     * @param menuSections
     * @return Food
     */
    @Transactional
    public Food FoodServiceImpl.setMenuSections(Food food, Iterable<Long> menuSections) {
        List<MenuSectionFood> items = getMenuSectionFoodService().findAll(menuSections);
        Set<MenuSectionFood> currents = food.getMenuSections();
        Set<MenuSectionFood> toRemove = new HashSet<MenuSectionFood>();
        for (Iterator<MenuSectionFood> iterator = currents.iterator(); iterator.hasNext();) {
            MenuSectionFood nextMenuSectionFood = iterator.next();
            if (items.contains(nextMenuSectionFood)) {
                items.remove(nextMenuSectionFood);
            } else {
                toRemove.add(nextMenuSectionFood);
            }
        }
        food.removeFromMenuSections(toRemove);
        food.addToMenuSections(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        food.setVersion(food.getVersion() + 1);
        return getFoodRepository().save(food);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param food
     */
    @Transactional
    public void FoodServiceImpl.delete(Food food) {
        // Clear bidirectional one-to-many parent relationship with MenuSectionFood
        for (MenuSectionFood item : food.getMenuSections()) {
            item.setFood(null);
        }
        
        getFoodRepository().delete(food);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Food> FoodServiceImpl.save(Iterable<Food> entities) {
        return getFoodRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void FoodServiceImpl.delete(Iterable<Long> ids) {
        List<Food> toDelete = getFoodRepository().findAll(ids);
        getFoodRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Food
     */
    @Transactional
    public Food FoodServiceImpl.save(Food entity) {
        return getFoodRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Food
     */
    public Food FoodServiceImpl.findOne(Long id) {
        return getFoodRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Food
     */
    public Food FoodServiceImpl.findOneForUpdate(Long id) {
        return getFoodRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Food> FoodServiceImpl.findAll(Iterable<Long> ids) {
        return getFoodRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Food> FoodServiceImpl.findAll() {
        return getFoodRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long FoodServiceImpl.count() {
        return getFoodRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Food> FoodServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getFoodRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Food> FoodServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getFoodRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Food> FoodServiceImpl.getEntityType() {
        return Food.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> FoodServiceImpl.getIdType() {
        return Long.class;
    }
    
}
